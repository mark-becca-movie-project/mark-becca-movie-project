{"ast":null,"code":"var _jsxFileName = \"/Users/mark/IdeaProjects/mark-becca-movie-project/netflix-optimized/src/Row.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"./axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Row(_ref) {\n  _s();\n\n  let {\n    title,\n    fetchUrl\n  } = _ref;\n  const [movies, setMovies] = useState([]); //starts as empty movie array\n  // so now we need a snippet of code which runs based on a specific condition or variable\n  //       a really handy hook from react is called useEffect\n\n  useEffect(() => {\n    //when row loads on page load, this code runs\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      setMovies(request.data.results);\n      return request;\n    }\n\n    fetchData();\n  }, [fetchUrl]);\n  /* if we leave brackets blank, run once when the row loads,  and don't run it again*/\n\n  console.log(movies);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Row, \"MO6b3PSP3RIUqZ8gtSrBZBVtBbs=\");\n\n_c = Row;\nexport default Row;\n/*\nNotes:  //use state to keep track of the movies - mark\n    //state can be considered, short term memory\n    //state is a way to write variables in react\n    //hooks is a way to make your life easier, give an initial value inside the brackets\n    //syntatic sugar = {title}\n    to use async write an internal function then call it\n\n */\n\nvar _c;\n\n$RefreshReg$(_c, \"Row\");","map":{"version":3,"sources":["/Users/mark/IdeaProjects/mark-becca-movie-project/netflix-optimized/src/Row.js"],"names":["React","useState","useEffect","axios","Row","title","fetchUrl","movies","setMovies","fetchData","request","get","data","results","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAOC,KAAP,MAAkB,SAAlB;;;AAEA,SAASC,GAAT,OAAgC;AAAA;;AAAA,MAAnB;AAACC,IAAAA,KAAD;AAAQC,IAAAA;AAAR,GAAmB;AAC5B,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBP,QAAQ,CAAC,EAAD,CAApC,CAD4B,CACc;AAC1C;AACA;;AACAC,EAAAA,SAAS,CAAC,MAAM;AACZ;AACA,mBAAeO,SAAf,GAA2B;AACvB,YAAMC,OAAO,GAAG,MAAMP,KAAK,CAACQ,GAAN,CAAUL,QAAV,CAAtB;AACAE,MAAAA,SAAS,CAACE,OAAO,CAACE,IAAR,CAAaC,OAAd,CAAT;AACA,aAAOH,OAAP;AACH;;AACDD,IAAAA,SAAS;AACZ,GARQ,EAQN,CAACH,QAAD,CARM,CAAT;AAQyB;;AACzBQ,EAAAA,OAAO,CAACC,GAAR,CAAYR,MAAZ;AAEA,sBACI;AAAA,2BACI;AAAA,gBAAKF;AAAL;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAMH;;GArBQD,G;;KAAAA,G;AAsBT,eAAeA,GAAf;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, {useState, useEffect} from \"react\"\nimport axios from \"./axios\";\n\nfunction Row({title, fetchUrl}) {\n    const [movies, setMovies] = useState([]); //starts as empty movie array\n    // so now we need a snippet of code which runs based on a specific condition or variable\n    //       a really handy hook from react is called useEffect\n    useEffect(() => {\n        //when row loads on page load, this code runs\n        async function fetchData() {\n            const request = await axios.get(fetchUrl);\n            setMovies(request.data.results);\n            return request;\n        }\n        fetchData();\n    }, [fetchUrl]);          /* if we leave brackets blank, run once when the row loads,  and don't run it again*/\n    console.log(movies);\n\n    return (\n        <div>\n            <h2>{title}</h2>\n            {/*{container with posters inside}*/}\n        </div>\n    )\n}\nexport default Row\n\n/*\nNotes:  //use state to keep track of the movies - mark\n    //state can be considered, short term memory\n    //state is a way to write variables in react\n    //hooks is a way to make your life easier, give an initial value inside the brackets\n    //syntatic sugar = {title}\n    to use async write an internal function then call it\n\n */"]},"metadata":{},"sourceType":"module"}